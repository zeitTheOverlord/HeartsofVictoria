# Calculates base/unmodified command limit based on rank, including conscripts for generals
ACL_commander_base_unit_cap = {
    value    = 20 # 20 * commander's rank
    multiply = commander_rank
    
    if = { # multiply by 3 to factor in conscripts for generals + commanders in chief (i.e. not admirals)
        limit = {
            this = {
                NOT = {
                    has_role = admiral
                }
            }
        }
        multiply = 3
    }
}

# Calculates command limit modifiers from traits (as of 1.2.7)
ACL_commander_trait_modifiers = {
    # Modifiers in Clausewitz are additive, btw
    value = 1
    
    # Condition: Senile
    if = {
        limit = {
            this = {
                has_trait = senile
            }
        }
        subtract = 0.25
    }
    
    # Personality: Arrogant
    if = {
        limit = {
            this = {
                has_trait = arrogant
            }
        }
        add = 0.25
    }
    
    # Personality: Cautious
    if = {
        limit = {
            this = {
                has_trait = cautious
            }
        }
        subtract = 0.2
    }
    
    # Skill: Traditionalist Commander
    if = {
        limit = {
            this = {
                has_trait = traditionalist_commander
            }
        }
        add = 0.1
    }
    
    # Skill: Popular Commander
    if = {
        limit = {
            this = {
                has_trait = popular_commander
            }
        }
        add = 0.2
    }
    
    # Skill: Celebrity Commander
    if = {
        limit = {
            this = {
                has_trait = celebrity_commander
            }
        }
        add = 0.3
    }
}

# Calculates the normal unit cap of the general/admiral this is called from
ACL_commander_unit_cap = { 
    value    = ACL_commander_trait_modifiers
    multiply = ACL_commander_base_unit_cap
}

# Gets magnitude mulitplier for overstacking debuff
# Debuff maxes at N% at 25% beyond command limit, both scaling linearly
ACL_overstacking_penalty_mult = {
    # Fetch number of units + unit cap
    # Considerations need to be made for on_battle_started, which calls this in country scope for some reason
    if = {
        limit = {
            exists = scope:attacker
        }
        value  = scope:attacker.num_units
        divide = scope:attacker.ACL_commander_unit_cap
    }
    else_if = {
        limit = {
            exists = scope:defender
        }
        value  = scope:defender.num_units
        divide = scope:defender.ACL_commander_unit_cap
    }
    else = { # properly calling from character scope, hopefully
        value  = num_units
        divide = ACL_commander_unit_cap
    }
    subtract = 1
    min      = 0
    multiply = 4 # Same as `divide = 0.25`, but multiplication is more performant
}

#======================================================================================================================#

# The following values are intended for use in localization

# Like ACL_commander_unit_cap, but without adjusting for conscripts
# Can also be used for conscripts cap at 50% size
ACL_loc_sv_command_unit_cap = {
    value    = 20 # 20 * commander's rank
    multiply = commander_rank
    multiply = ACL_commander_trait_modifiers
}

# 125% size
ACL_loc_sv_over_25 = {
    value    = ACL_loc_sv_command_unit_cap
    multiply = 1.25
    floor    = yes
}
ACL_loc_sv_over_25_conscripts = { # Game takes post-modifiers base num then does x2. We could take a shortcut and pre-
    value    = ACL_loc_sv_over_25 # calculate the multiplier (x2.5 in this case) from the unmodified base num, but
    multiply = 2                  # rounding errors will cause discrepancies between the tooltip and the actual command
}                                 # limit. (ex: traditionalist commander + expanded forces will show 55 conscripts in
ACL_loc_sv_over_25_total = {      # the tooltip, but 54 conscripts in the real command limit calculated by the game.
    value    = ACL_loc_sv_over_25 # 
    multiply = 3                  # Avoiding pre-calculated shortcuts for the rest of them, too, for the same reason.
}

# Normal size
ACL_loc_sv_normal = {
    value = ACL_loc_sv_command_unit_cap
}
ACL_loc_sv_normal_conscripts = {
    value    = ACL_loc_sv_normal
    multiply = 2
}
ACL_loc_sv_normal_total = {
    value    = ACL_loc_sv_normal
    multiply = 3
}

# 75% size
ACL_loc_sv_cut_25 = {
    value    = ACL_loc_sv_command_unit_cap
    multiply = 0.75
    floor    = yes
}
ACL_loc_sv_cut_25_conscripts = {
    value    = ACL_loc_sv_cut_25
    multiply = 2
}
ACL_loc_sv_cut_25_total = {
    value    = ACL_loc_sv_cut_25
    multiply = 3
}

# 50% size
ACL_loc_sv_cut_50 = {
    value    = ACL_loc_sv_command_unit_cap
    multiply = 0.50
    floor    = yes
}
ACL_loc_sv_cut_50_conscripts = {
    value    = ACL_loc_sv_cut_50
    multiply = 2
}
ACL_loc_sv_cut_50_total = {
    value    = ACL_loc_sv_cut_50
    multiply = 3
}

# 25% size
ACL_loc_sv_cut_75 = {
    value    = ACL_loc_sv_command_unit_cap
    multiply = 0.25
    floor    = yes
}
ACL_loc_sv_cut_75_conscripts = {
    value    = ACL_loc_sv_cut_75
    multiply = 2
}
ACL_loc_sv_cut_75_total = {
    value    = ACL_loc_sv_cut_75
    multiply = 3
}
