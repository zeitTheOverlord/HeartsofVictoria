template hud_elements_alpha {
	alpha = 1
}

# Note: We are using a slightly modified version of this in outliner_framework:11, update that one as well if this one gets changed
template hud_visibility {
	visible = "[And( IsInGame, And( Not( IsPauseMenuShown ), Not( IsGameOverScreenShown )))]"
}

@secondary_icon_size = 26

types topbar_components
{
	### SECONDARY ICONS
	type topbar_secondary_icons = container {
		position = { 130 43 }
		flowcontainer = {
			direction = vertical
			spacing = 1
			using = fullscreen_hide
			flowcontainer = {
				visible = "[And(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid,GetVariableSystem.Exists('more_topbar_info'))]"
				widget = {
					size = { 540 0 }
				}
			}
			flowcontainer = {
				visible = "[And(And(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid, Not(GetVariableSystem.Exists('fourth_row_topbar_info'))),Not(GetVariableSystem.Exists('more_topbar_info')))]"
				block "animation" {
					position = { 0 0 }
					alpha = 0
					
					state = {
						name = show_topbar_secondary_stats
						alpha = 1
						position_y = 0
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide_topbar_secondary_stats
						alpha = 0
						position_y = -5
						duration = 0.15
						using = Animation_Curve_Default
						next = hide_topbar_hover_away
						on_finish = "[GetVariableSystem.Toggle('hide_topbar_var')]"
					}
				}
				
				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
				}
				
				flowcontainer = {
					name = "tutorial_highlight_gdp"
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					using = GDP_tooltip_with_graph
					using = tooltip_below

					onmousehierarchyenter = "[SelectMapModeByKey('mm_gdp')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no
					
					icon = {
						texture = "gfx/interface/icons/generic_icons/gdp.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = TOPBAR_VAR_COUNTRY_GETGDP
						autoresize = yes
						align = left|nobaseline
					}
				}
				
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					tooltip = "LITERACY_TOOLTIP"
					using = tooltip_below
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/literacy.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = TOPBAR_VAR_COUNTRY_GETINCORPORATEDLITERACYRATE
						autoresize = yes
						align = left|nobaseline
					}
				}
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					using = average_standard_of_living_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_standard_of_living')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no
				
					textbox = {
						parentanchor = vcenter
						text = "[LabelingHelper.GetIconForStandardOfLivingCFixedPoint(Country.GetAverageSoLByPopulation)|v]"
						autoresize = yes
						align = left|nobaseline
						fontsize = 21 #hack to get the same size on the text icon as the rest in the top bar
					}

					textbox = {
						parentanchor = vcenter
						text = "[Country.GetFormattedStandardOfLivingAll|v]"
						autoresize = yes
						align = left|nobaseline
						margin_left = 3
					}
				}
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2	
					using = population_tooltip_with_graph
					using = tooltip_below
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = TOPBAR_VAR_COUNTRY_GETTOTALPOPULATION
						autoresize = yes
						align = left|nobaseline
					}
				}
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					margin_left = -4	
					using = radicals_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_radicals')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alpha = "[TransparentIfZero_int32(Country.GetNumRadicals)]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population_radical.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = "VARIABLE_COUNTRY_GET_NUMRADICALS"
						autoresize = yes
						align = left|nobaseline
					}
				}
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2	
					margin_left = -1
					using = loyalists_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_loyalists')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alpha = "[TransparentIfZero_int32(Country.GetNumLoyalists)]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population_loyalist.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = "VARIABLE_COUNTRY_GET_NUMLOYALISTS"
						autoresize = yes
						align = left|nobaseline
					}
				}
			}

			### EXTRA INFO
			flowcontainer = {
				visible = "[And(And(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid, Not(GetVariableSystem.Exists('fourth_row_topbar_info'))),Not(GetVariableSystem.Exists('more_topbar_info')))]"
				name = "extra_info"	

				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
				}
				flowcontainer = {
					visible = "[And(Not(GetVariableSystem.Exists('third_row_topbar_info')), Not(GetVariableSystem.Exists('fourth_row_topbar_info')))]"
					# Prestige
					flowcontainer = {
						name = "prestige"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "COUNTRY_PRESTIGE_BREAKDOWN"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = prestige_icon
							texture = "gfx/interface/icons/generic_icons/unused/most_senior_front_commander.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetPrestige|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetPrestige)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
					# Infamy
					flowcontainer = {
						name = "infamy"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 1
						tooltip = "[Country.GetInfamyDesc]"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = infamy_icon
							texture = "[Country.GetInfamyIconTexture]"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetInfamy|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetInfamy)]"
							autoresize = yes
							align = left|nobaseline
						}
					}	
							
					# Innovation
					flowcontainer = {
						name = "innovation"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "INNOVATION_TOOLTIP"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = infamy_icon
							texture = "gfx/interface/icons/generic_icons/innovation.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetWeeklyInnovation|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetWeeklyInnovation)]"
							autoresize = yes
							align = left|nobaseline
						}
					}

					# Army Power projection
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "[Country.GetArmyPowerProjectionDesc]"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = infamy_icon
							texture = "gfx/interface/icons/military_icons/offence.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = TOPBAR_VAR_COUNTRY_GETARMYPOWERPROJECTION
							alpha = "[TransparentIfZero_int32(Country.GetArmyPowerProjection)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
					# Battalions
					flowcontainer = {
						name = "battalions"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						margin_left = -8
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = battalions_icon
							texture = "gfx/interface/icons/generic_icons/battalions.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetBattalions|v]+[Country.CalcConscriptableBattalions|v]"
							alpha = "[TransparentIfZero_int32(Country.GetBattalions)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}
					# Flotillas
					flowcontainer = {
						name = "Flotillas"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 1
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_WARSHIPS_TOOLTIP"
						using = tooltip_below
						margin_left = -3

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = flotillas_icon
							texture = "gfx/interface/icons/generic_icons/flotillas.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = BO_GET_WARSHIPS
							alpha = "[TransparentIfZero_int32(Country.GetWarships)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = 2
						}
					}
				}
				flowcontainer = {
					visible = "[And(GetVariableSystem.Exists('third_row_topbar_info'), Not(GetVariableSystem.Exists('fourth_row_topbar_info')))]"
					# Arable Land
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "ARABLE_LAND_TT"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icons/generic_icons/arable_land_icon.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = TOPBAR_VAR_COUNTRY_GETARABLELAND
							alpha = "[TransparentIfZero_int32(Country.GetArableLand)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
					# Turmoil Percentage	
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "STATES_IN_TURMOIL_TOOLTIP"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icons/state_status_icons/has_turmoil.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = TOPBAR_VAR_COUNTRY_CALCTURMOIL
							alpha = "[TransparentIfZero_int32(Country.CalcTurmoil)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}
					# Credit
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "[Country.GetCreditTooltip]"
						using = tooltip_below

						icon = {
							size = { 23 23 }
							texture = "gfx/interface/icons/generic_icons/coin_icon_10.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = TOPBAR_VAR_COUNTRY_GETMAXCREDIT
							alpha = "[TransparentIfZero_int32(Country.CalcTurmoil)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}
					# Legitimacy
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "LEGITIMACY_TT"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icons/generic_icons/legitimacy.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[GetPlayer.GetGovernmentLegitimacy|v]"
							alpha = "[TransparentIfZero_int32(Country.GetGovernmentLegitimacy)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}

					# GetNumConvoys
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "CONVOYS_TOPBAR_TTT"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icons/generic_icons/convoys.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = TOPBAR_VAR_COUNTRY_GETNUMUSABLECONVOYS
							alpha = "[TransparentIfZero_int32(Country.GetNumUsableConvoys)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}

					# GetTotalUrbanization
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "TOTAL_URBANIZATION_TT"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							texture = "gfx/interface/icons/event_icons/event_industry.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = TOPBAR_VAR_COUNTRY_GETTOTALURBANIZATION
							alpha = "[TransparentIfZero_int32(Country.GetTotalUrbanization)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}
				}
			}
			# Pop list
			flowcontainer = {
				visible = "[And(And(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid, Not(GetVariableSystem.Exists('more_topbar_info'))),GetVariableSystem.Exists('fourth_row_topbar_info'))]"
				# Pops

				fixedgridbox = {
					datamodel = "[Country.AccessPopTypesSortedOnPopulation]"
					addcolumn = 90
					addrow = 29
					datamodel_wrap = 2
					maxhorizontalslots = 6
					#flipdirection = yes
					item = {
						flowcontainer = {
							tooltip = "TOPBAR_POP_TT"
							using = tooltip_below

							icon = {
								size = { @secondary_icon_size @secondary_icon_size }
								texture = "[PopType.GetTexture]"
								parentanchor = vcenter
							}

							textbox = {
								parentanchor = vcenter
								text = TOPBAR_VAR_COUNTRY_GETPOPULATION_GETPLAYER
								alpha = "[TransparentIfZero_int32(PopType.GetPopulation(GetPlayer))]"
								autoresize = yes
								align = left|nobaseline
							}
						}
					}
				}
			}
		}
	}

	type topbar = widget {
		widget = {
			name = "topbar"
			using = hud_visibility
			datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"
			using = clickthrough_blocker
			size = { 705 130 }
			allow_outside = yes
			alwaystransparent = yes
			resizeparent = yes
			
			using = default_fade_in_out
			
			onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_topbar_secondary_stats','show_topbar_secondary_stats')]"
			onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_topbar_secondary_stats','hide_topbar_secondary_stats')]"

			widget = {
				### background
				#this is also used to trigger notifications maximize/minimize
				#when you open/close any fullscreen (did not know where else to put it)
				widget = {
					using = fullscreen_hide
					size = { 100% 100% }
					
					state = {
						name = _show
						alpha = 1
						duration = 0
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_minimize','notifications_maximize')]"
					}
					state = {
						name = _hide
						alpha = 0
						duration = 0.2
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_maximize','notifications_minimize')]"
					}
					
					background = {
						texture = "gfx/interface/main_hud/topbar_bg.dds"
						shaderfile = "gfx/FX/pdxgui_default.shader"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 100
						texture_density = 2
						using = hud_elements_alpha
						
						modify_texture = {
							texture = "gfx/interface/backgrounds/default_bg_shading.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
							alpha = 0.5
						}
						modify_texture = {
							using = texture_velvet
						}
						modify_texture = {
							using = fancy_pattern
						}
					}
					icon = {
						texture = "gfx/interface/main_hud/topbar_side_dec.dds"
						size = { 100% 100% }
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 110
						texture_density = 2
						
						using = hud_shiny_effect
					}
				}
				
				flowcontainer = {
					margin_right = 35
					margin_bottom = 7
					resizeparent = yes
					
					container = {
						### PRIMARY ICONS
						flowcontainer = {
							position = { 130 0 }
							spacing = 37
							margin_bottom = 5
							
							flowcontainer = {
								# TODO Mikael / Aron: surely there is a better way to do this
								name = "tutorial_highlight_all_capacities"
								spacing = 37
								
								### BUREAUCRACY
								button = {
									name = "tutorial_highlight_bureaucracy"
									using = glow_button
									size = { 100 40 }
									tooltip = "BUREAUCRACY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
							
									icon = {
										size = { 36 36 }
										name = bureaucracy_icon
										texture = "gfx/interface/icons/topbar/bureaucracy_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -2 }
										name = capital_value
										text = GETPLAYER_GETPOWERDELTA_BUREAUCRACY
										align = center|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('bureaucracy')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('bureaucracy'))]"
										}
									}			
								}
							
								### AUTHORITY
								button = {
									name = "tutorial_highlight_authority"
									using = glow_button
									size = { 100 40 }
									tooltip = "AUTHORITY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'overview')]"
							
									icon = {
										size = { 36 36 }
										name = authority_icon
										texture = "gfx/interface/icons/topbar/authority_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -2 }
										name = capital_value
										text = GETPLAYER_GETPOWERDELTA_AUTHORITY
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('authority')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('authority'))]"
										}
									}				
								}
							
								### INFLUENCE
								button = {
									name = "tutorial_highlight_influence"
									using = glow_button
									size = { 100 40 }
									tooltip = "INFLUENCE_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'diplomatic_overview')]"
									
									icon = {
										size = { 36 36 }
										name = dip_power_icon
										texture = "gfx/interface/icons/topbar/influence_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -2 }
										name = capital_value
										text = GETPLAYER_GETPOWERDELTA_INFLUENCE
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('influence')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('influence'))]"
										}
									}
								}
							}
							
							### MONEY
							container = {
								name = "tutorial_highlight_treasury"
								layoutpolicy_vertical = expanding
								
								button = {
									using = glow_button					
									size = { 100 40 }
									tooltip = "CAPITAL_MONEY"
									using = tooltip_below
									using = money_tooltip_with_graph
									onclick = "[InformationPanelBar.OpenPanelTab('budget', 'overview')]"
								
									icon = {
										size = { 36 36 }
										name = income_power_icon
										texture = "gfx/interface/icons/topbar/income_power_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -2 }
										name = capital_value
										text = "[AccessPlayer.PredictWeeklyBalanceWithEconomyHealthHint]"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.GetCreditRatio, '(CFixedPoint)0' )]"

										bad_progressbar_horizontal = {
											parentanchor = vcenter
											name = "credit_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetCreditRatio)]"
												min = 0  
												max = 1
											}
										}
									}
									
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThan_CFixedPoint( GetPlayer.GetGoldReserveRatio, '(CFixedPoint)0' )]"
									
										gold_progressbar_horizontal = {
											parentanchor = vcenter
											name = "gold_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetGoldReserveRatio )]"
												min = 0  
												max = 1
											}
										}
									}
								}
							}
						}
						
						#shows only on hover
						topbar_secondary_icons = {
							visible = "[GetVariableSystem.Exists('more_topbar_info')]"
						}
						
						#locked
						topbar_secondary_icons = {
							visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
							
							blockoverride "animation" {
								position = { 0 44 }
							}
						}
					}
				}
			}
			# Unlock when hidden
			button_icon_round_toggle = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
				size = { 24 24 }
				parentanchor = right
				position = { -30 17 }
				
				alpha = 0
				
				state = {
					name = show_topbar_secondary_stats
					delay = 0.15
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide_topbar_secondary_stats
					alpha = 0
					duration = 0
					using = Animation_Curve_Default
				}
				
				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('more_topbar_info')]"
				}
				blockoverride "view_1" {
					visible = "[GetVariableSystem.Exists('more_topbar_info')]"
				}
				blockoverride "view_2" {
					visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/unlock.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/lock.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "LOCK_TOPBAR"
				}
				blockoverride "tooltip_2" {
					tooltip = "UNLOCK_TOPBAR_MOD"
				}
			}
			# Toggle second row/pop list
			button_icon_round_toggle = {
				visible = "[And(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid,Not(GetVariableSystem.Exists('more_topbar_info')))]"
				size = { 24 24 }
				parentanchor = right
				position = { -30 75 }
				
				alpha = 0
				
				state = {
					name = show_topbar_secondary_stats
					delay = 0.15
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide_topbar_secondary_stats
					alpha = 0
					duration = 0
					using = Animation_Curve_Default
				}

				
				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('third_row_topbar_info')]"
				}
				onrightclick = "[GetVariableSystem.Toggle('fourth_row_topbar_info')]"
				blockoverride "view_1" {
					visible = "[GetVariableSystem.Exists('more_topbar_info')]"
				}
				blockoverride "view_2" {
					visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/plus.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/plus.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "MORE_TOP_STATS_TT"
				}
				blockoverride "tooltip_2" {
					tooltip = "MORE_TOP_STATS_TT"
				}
			}
			### FLAG
			fancy_flag = {
				blockoverride "rank_badge_block" {} # Show rank badge seperately from flag with topbar_rank

				observer_mode_overlay = {
					blockoverride "observer_properties" {
						position = { -1 -105 }
					}

					blockoverride "icon_size" {
						size = { 25 25 }
					}

					blockoverride "fontsize" {
						using = fontsize_medium
						maximumsize = { 100 -1 }
					}
				}
			}
		}
	}

	type topbar_rank = button {
		name = "topbar_rank"
		using = hud_visibility
		datacontext = "[GetPlayer]"
		using = clickthrough_blocker
		size = { 57 57 }
		position = { -4 78 }
		
		onclick = "[MapListPanelManager.ToggleCurrentPanel]"
		onclick = "[SelectMapModeByKey('mm_default')]"

		### RANK
		rank_badge = {
			size = { 57 57 }
		}
	}
}
