# COPY-PASTED FOR NOW
@panel_width_minus_10 = 710			# used to be 450
@panel_width = 720  				# used to be 460
@panel_width_half = 360				# used to be 230
@panel_width_plus_10 = 730  		# used to be 470
@panel_width_plus_14 = 734			# used to be 474
@panel_width_plus_14_half = 367		# used to be 237
@panel_width_plus_20 = 740			# used to be 480
@panel_width_plus_30 = 750			# used to be 490
@panel_width_plus_70 = 790			# used to be 530

types production_methods
{
	type production_methods_entries_container = flowcontainer 
	{
		direction = vertical
		parentanchor = hcenter
		#using = default_content_fade
		spacing = -1  #10
		
		flowcontainer = {
		#size = { @panel_width_plus_14 -1 }
			block "production_entries" {
			}
			direction = vertical
			parentanchor = hcenter
			spacing = -1 #10

			item = {
				buildings_production_method_item = {}
			}
		}

		block "potential_entries_header" {

			default_header = {
				size = { @panel_width_plus_14 60 }
				parentanchor = hcenter
			}
		}

		flowcontainer = {
			margin = { 7 -5 }
			
			dynamicgridbox = {
				block "potential_entries" {
				}
				flipdirection = yes
				datamodel_wrap = 5

				item = {
					container = {
						producing_building_button = {}
					}
				}
			}
		}
	}

	type production_methods_panel = default_block_window_building
	{
		name = "production_methods_panel"
		
		blockoverride "animation_state_block" {
			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/buildings"
				}
			}

			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/buildings_stop"
				}
			}
		}		
		
		blockoverride "window_header_name" {
			text = "PRODUCTION_METHODS_HEADER"
		}


		blockoverride "fixed_top" {

			top_illu = {
				datacontext = "[AccessPlayer]"

			#	blockoverride "illu" {						
			#		texture = "gfx/interface/illustrations/top_illus/top_illu_market.dds"
			#	}

				flowcontainer = {
					parentanchor = center
					spacing = 0
					tooltip = "CONSTRUCTION_SPEED_BASE_TOOLTIP"

					icon = {
						parentanchor = vcenter
						size = { 35 35 }
						texture = "gfx/interface/icons/state_status_icons/has_construction.dds"
						visible = "[Not(Country.IsConstructionPaused)]"
					}

					icon = {
						parentanchor = vcenter
						size = { 35 35 }
						texture = "gfx/interface/icons/state_status_icons/has_construction_paused.dds"
						visible = "[Country.IsConstructionPaused]"
					}

					textbox = {
						parentanchor = vcenter
						using = fontsize_mega
						text = "CONSTRUCTION_VALUE"
						autoresize = yes
						align = center|nobaseline
					}
				}
			}

			tab_buttons = {
				blockoverride "first_button" {
					text = "URBAN_BUILDINGS"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('urban')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('urban')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('urban') )]"
				}
				blockoverride "first_button_selected" {
					text = "URBAN_BUILDINGS"
				}

				blockoverride "second_button" {
					text = "RURAL_BUILDINGS"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('rural')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('rural')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('rural') )]"
				}
				blockoverride "second_button_selected" {
					text = "RURAL_BUILDINGS"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_rural_tab"
				}

				blockoverride "third_button" {
					text = "DEVELOPMENT_BUILDINGS"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanel.SelectTab('development')]"
				}
				blockoverride "third_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('development')]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('development') )]"
				}
				blockoverride "third_button_selected" {
					text = "DEVELOPMENT_BUILDINGS"
				}
				blockoverride "third_button_name" {
					name = "tutorial_highlight_development_tab"
				}

				blockoverride "fourth_button" {
					text = "CONSTRUCTION"
				}
				blockoverride "fourth_button_click" {
					onclick = "[InformationPanel.SelectTab('construction_queues')]"
				}
				blockoverride "fourth_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('construction_queues')]"
				}
				blockoverride "fourth_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('construction_queues') )]"
				}
				blockoverride "fourth_button_selected" {
					text = "CONSTRUCTION"
				}
			}
		}
		
		blockoverride "scrollarea_content" {			
			flowcontainer = {
				direction = vertical

				flowcontainer = {
					using = default_list_position
					direction = vertical
					spacing = 0
					margin_top = 10  #15

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('urban')]"
						blockoverride "production_entries" {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesUrban]"
						}
						blockoverride "potential_entries" {
							datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesUrban]"
						}
						blockoverride "text" {
							text = "AVAILABLE_URBAN_BUILDINGS"
						}
					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('rural')]"
						blockoverride "production_entries" {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesRural]"
						}
						blockoverride "potential_entries" {
							datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesRural]"
						}
						blockoverride "text" {
							text = "AVAILABLE_RURAL_BUILDINGS"
						}
					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('development')]"
						blockoverride "production_entries" {
						datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesDevelopment]"
						}
						blockoverride "potential_entries" {
						datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesDevelopment]"
						}
						blockoverride "text" {
							text = "AVAILABLE_DEVELOPMENT_BUILDINGS"
						}
					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('construction_queues')]"
						datacontext = "[AccessPlayer]"

						blockoverride "production_entries" {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesConstruction]"
						}

						# There are no potential entries yet, for now hide the header and list
						blockoverride "potential_entries_header" {}
						blockoverride "potential_entries" {}

						construction_queue = {}					
					}
				}
			}
		}
	}

	### autoexpand
	type building_auto_expand = widget 
	{
		visible = "[IsPotential( Building.ToggleAutoExpand )]"
		size = { 35 35 }
		
		icon = {
			using = rotate_glow_blue
			size = { 130% 130% }
			visible = "[Building.IsAutoExpanding]"
			alwaystransparent = yes
			parentanchor = center
			using = default_fade_in_out
		}
		
		button_icon_round_action = {
			size = { 100% 100% }
			visible = "[Building.IsAutoExpanding]"
			enabled = "[IsValid( Building.ToggleAutoExpand )]"
			onclick = "[Execute( Building.ToggleAutoExpand )]" 
			tooltip = [Building.GetAutoExpandTooltip]
			
			blockoverride "icon" {
				texture = "gfx/interface/production_methods/auto_expand.dds"
			}
			blockoverride "icon_size" {
							size = { 77% 77% }
			}	
		}

		button_icon_round_action = {
			size = { 100% 100% }
			visible = "[Not(Building.IsAutoExpanding)]"
			enabled = "[IsValid( Building.ToggleAutoExpand )]"
			onclick = "[Execute( Building.ToggleAutoExpand )]" 
			tooltip = [Building.GetAutoExpandTooltip]
			using = confirm_button_sound
			
			blockoverride "icon" {
				texture = "gfx/interface/production_methods/auto_expand_not.dds"
			}
			blockoverride "icon_size" {
							size = { 77% 77% }
			}
		}
	}
	
	
	### has new PM icon_Exclamation mark_
	type has_new_pm_icon = icon 
	{
		size = { 16 16 }
		framesize = { 52 52 }
		texture = "gfx/interface/current_situations/icon_situation_unread.dds"
		block "visible" {}
		tooltip = "TOOLTIP_NEW_PRODUCTION_METHOD"
	}

	### PM ITEM
	type buildings_production_method_item = flowcontainer 
	{
		visible = "[Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings))]"
		direction = vertical
		datacontext = "[ProductionMethodsPanelEntry.GetBuildingType]"
		spacing = -1  #10

		### TOP ITEM
		widget = 
		{
			size = { @panel_width_plus_30 50 }  #@panel_width_plus_14 95 

			highlight_tutorial_ui = 
			{
	   			visible = "[BuildingType.IsBeingTutorialHighlighted]"
	    	}

			### DROPDOWN / EXPAND
			section_header_button = 
			{
				parentanchor = vcenter
				position = { 5 0 }  #110 0 
				size = { @panel_width_plus_30 50 }  #440 38 

				blockoverride "onclick" 
				{
					onclick = "[ProductionMethodsPanelEntry.ToggleExpand]"
				}
				
				blockoverride "onclick_showmore" 
				{
					visible = "[Not(ProductionMethodsPanelEntry.IsExpanded)]"
				}

				blockoverride "onclick_showless" 
				{
					visible = "[ProductionMethodsPanelEntry.IsExpanded]"
				}

				container = 
				{
					#size = { @panel_width_plus_30 50 }
					parentanchor = left|vcenter

					icon = 
					{
						position = { 30 0 }
						size = { 35 35 }
						parentanchor = vcenter
						datacontext = "[ProductionMethodsPanelEntry.GetBuildingType]"
						texture = "[ProductionMethodsPanelEntry.GetBuildingType.GetTexture]"
						tooltipwidget = 
						{
							FancyTooltip_BuildingType = {}
						}
					}

					textbox = 
					{
						position = { 65 0 }
						size = { 80 40 }
						parentanchor = vcenter
						text = "V_PRODUCTION_PANELENTRY_GETBUILDINGTYPE_GETNOFORMATTING"
						align = left|nobaseline
						elide = right
					}

					container = 
					{
						position = { 140 0 }
						parentanchor = vcenter
						background = 
						{
							using = entry_bg
							margin = { 0 -2 }
						}
						textbox = 
						{
							text = "BUILDING_TYPE_COUNT"
							align = hcenter|nobaseline
							size = { 50 35 }
							elide = right
							fontsize_min = 8
						}
					}

					### expand
					button_icon_round_map_interaction = 
					{
						position = { 190 0 }
						size = { 28 28 }
						parentanchor = vcenter
						visible = "[Or( ProductionMethodsPanelEntry.GetBuildingType.IsBuildable, ProductionMethodsPanelEntry.GetBuildingType.IsExpandable )]"
						blockoverride "icon" {
							texture = "gfx/interface/buttons/button_icons/plus.dds"
						}
						onclick = "[ProductionMethodsPanelEntry.GetBuildingType.ActivateExpansionLens]"
						using = select_button_sound
						tooltip = "EXPAND"
					}

					### auto expand
					widget = 
					{
						position = { 218 0 }
						size = { 28 28 }
						parentanchor = vcenter
						visible = "[ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded]"
						icon = 
						{
							using = rotate_glow_blue
							size = { 130% 130% }
							visible = "[ProductionMethodsPanelEntry.HasAllAutoExpand]"
							alwaystransparent = yes
							parentanchor = center
							using = default_fade_in_out
						}
						button_icon_round_action = 
						{
							size = { 100% 100% }
							visible = "[ProductionMethodsPanelEntry.HasAllAutoExpand]"
							enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
							onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"					
							tooltip = "AUTO_EXPAND_ALL_YES"
							blockoverride "icon" {
								texture = "gfx/interface/production_methods/auto_expand.dds"
							}
							blockoverride "icon_size" {
								size = { 70% 70% }
							}
						}
						button_icon_round_action = 
						{
							size = { 100% 100% }
							visible = "[ProductionMethodsPanelEntry.HasAllNoAutoExpand]"
							enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
							onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
							tooltip = "AUTO_EXPAND_ALL_NO"
							using = confirm_button_sound
							blockoverride "icon" {
								texture = "gfx/interface/production_methods/auto_expand_not.dds"
							}
							blockoverride "icon_size" {
								size = { 70% 70% }
							}
						}
						button_icon_round_action = 
						{
							size = { 100% 100% }
							visible = "[ProductionMethodsPanelEntry.HasMixedAutoExpand]"
							enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
							onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
							tooltip = "AUTO_EXPAND_ALL_MIXED"
							blockoverride "icon" {
								texture = "gfx/interface/production_methods/subsidized_mixed.dds"
							}
							blockoverride "icon_size" {
								size = { 70% 70% }
							}
						}
					}

					### production methods grouped
					container = 
					{
						position = { 248 0 }
						parentanchor = bottom
						name = "tutorial_highlight_production_methods"
						
						fixedgridbox = 
						{
							datamodel = "[ProductionMethodsPanelEntry.AccessBuildingType.AccessProductionMethodGroups]"
							flipdirection = yes
							addcolumn = 39
							addrow = 39

							item = 
							{
								widget = 
								{
									size = { 38 38 }
									tooltip = "[ProductionMethodsPanelEntry.GetBulkChangeTooltip( ProductionMethodGroup.Self )]"
									using = tooltip_above

									button = 
									{
										visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessCountryProductionMethods( GetPlayer.Self ) ), '(int32)1' )]"
										distribute_visual_state = no
										inherit_visual_state = no
										using = expand_button_bg_no_fade
										size = { 100% 100% }
										onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenuForType(ProductionMethodsPanelEntry.AccessBuildingType, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
									}
									### pm icon
									icon = 
									{
										visible = "[ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self )]"
										size = { 33 33 }
										parentanchor = center
										texture = "[ProductionMethodsPanelEntry.GetAllSameProductionMethodTexture( ProductionMethodGroup.Self )]"
									}
									### mixed pm icon
									icon = 
									{
										visible = "[Not( ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self ) )]"
										size = { 33 33 }
										parentanchor = center
										texture = "[ProductionMethodGroup.GetMixedIcon]"
									}
									### new pm
									has_new_pm_icon = 
									{
										position = { -2 2 }
										parentanchor = bottom|left
										blockoverride "visible" {
											visible = "[GetPlayer.HasNewProductionMethodInGroup( ProductionMethodGroup.Self )]"
										}
									}
									### nr available
									textbox = 
									{
										text = "BOLD_PRODUCTION_GROUP_GETNUMAVAILABLEOPTIONSFORBUILDINGTYPE"
										parentanchor = top|right
										position = { -5 0 }
										autoresize = yes
										align = right|nobaseline
										visible = "[GreaterThan_int32( ProductionMethodGroup.GetNumAvailableOptionsForBuildingType(ProductionMethodsPanelEntry.AccessBuildingType), '(int32)1')]"
										tooltip = "PRODUCTION_METHOD_OPTIONS_BULK"
										using = tooltip_above
										using = fontsize_small
										background = 
										{
											using = default_background
											margin = { 8 4 }
										}
									}
								}
							}
						}
					}
				}

				### subsidize
				widget = 
				{
					position = { -20 0 }
					size = { 28 28 }
					parentanchor = right|vcenter
					visible = "[ProductionMethodsPanelEntry.GetBuildingType.CanBeSubsidized]"

					container = 
					{
						position = { -83 0 }
						parentanchor = vcenter
						textbox = {
							text = "[BuildingType.GetProductivitySpanDesc(GetPlayer.Self)]"
							visible = "[And( And(Not(BuildingType.IsGovernmentFunded), Not(BuildingType.IsSubsistenceBuilding)), GreaterThan_int32( BuildingType.GetLevelCountInCountry(GetPlayer.Self), '(int32)0' ))]"
							tooltip = "PRODUCTIVITY_SPAN_TOOLTIP"
							align = right|nobaseline
							size = { 80 40 }
							elide = right
							fontsize_min = 8
						}
					}

					icon = 
					{
						using = rotate_glow_blue
						size = { 130% 130% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						alwaystransparent = yes
						parentanchor = center
						using = default_fade_in_out
					}
					button_icon_round_action = 
					{
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"					
						tooltip = "SUBSIDIZED_ALL_YES"
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = 
					{
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllNoSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_NO"
						using = confirm_button_sound
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_not.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = 
                    {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasMixedSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_MIXED"
						blockoverride "icon" 
                        {
							texture = "gfx/interface/production_methods/subsidized_mixed.dds"
						}
						blockoverride "icon_size" 
                        {
							size = { 70% 70% }
						}
					}
				}
			}
		}

		### EXPANDED LIST OF BUILDINGS
		expanded_list = 
		{
			#using = expanded_list_bg
			datamodel = "[ProductionMethodsPanelEntry.AccessBuildings]"
			visible = "[ProductionMethodsPanelEntry.IsExpanded]"
            spacing = 1  #10
        
			item = 
			{
				widget = 
				{
					highlight_tutorial_ui = 
					{
						visible = "[Building.IsBeingTutorialHighlighted]"
					}
					size = { @panel_width_plus_10 35 }  #@panel_width 105 
					parentanchor = hcenter
					

					onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					alwaystransparent = no

					### building button
					button = {
						parentanchor = left|vcenter  #hcenter
						position = { 0 0 }  #0 5 
						size = { @panel_width_plus_10 35 }  #@panel_width_minus_10 38 
						using = default_button
						
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
						distribute_visual_state = no
						
						tooltipwidget = {
							FancyTooltip_Building = {}
						}
						
						textbox = {
							position = { 6 0 }  #15 0 
							text = "[Building.GetState.GetName]"
							size = { 80 30 }  #305 30 
							align = left|nobaseline
							elide = right
							fontsize_min = 6
							parentanchor = left|vcenter
						}
							textbox = 
							{
							visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsidized))]"
							position = { -570 0 }
							text = "MONEY_SUBTRACT_CFIXED_POINT_GOV"
							
							
							tooltip = "[Building.GetTaxationRevenueTooltip]"
							autoresize = yes
							fontsize_min = 6
							align = right|nobaseline
							parentanchor = right|vcenter
							}
							textbox = 
							{
							visible = "[Building.IsGovernmentFunded]"
							position = { -570 0 }
							text = "MONEY_SUBTRACT_CFIXED_POINT_GOV"
							tooltip = "[Building.GetGovernmentExpensesDesc]"
							autoresize = yes
							fontsize_min = 6
							align = right|nobaseline
							parentanchor = right|vcenter
							}
							textbox = 
							{
							visible = "[Building.IsSubsidized]"
							position = { -570 0 }
							text = "MONEY_SUBTRACT_CFIXED_POINT_SUB"
							tooltip = "TAX_SUB"
							autoresize = yes
							fontsize_min = 6
							align = right|nobaseline
							parentanchor = right|vcenter
							}							
						
                    }
					
                    ### production methods single
                    fixedgridbox = 
                    {
                            datacontext = "[Building]"
							visible = "[Or(Building.IsMilitaryBuilding,EqualTo_string(Building.GetBuildingType.GetKey,'building_construction_sector'))]"
                            position = { 265 0 }  #130 -5 
                            parentanchor = left|vcenter
                            datamodel = "[Building.AccessProductionMethodGroups]"
                            flipdirection = yes
                            addcolumn = 30  #52
                            addrow = 30  #50

                        item = 
                        {
                            widget = 
                            {
                                size = { 30 30 }  #50 50 
                                datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
                                datacontext = "[ProductionMethod]"
                                datacontext = "[Building]"
                                datacontext = "[ProductionMethodGroup]"
                                using = tooltip_above
                                tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"
                                
                                button = 
                                {
                                    visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
                                    using = expand_button_bg_no_fade
                                    size = { 100% 100% }
                                    onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
                                }

                                icon = 
                                {
                                    size = { 30 30 }  #40 40 
                                    parentanchor = center
                                    texture = "[ProductionMethod.GetTexture]"
                                }
                                
                                ### new pm
                                has_new_pm_icon = 
                                {
                                    position = { -2 2 }
                                    parentanchor = bottom|left
                                    blockoverride "visible" 
                                    {
                                        visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
                                    }
                                }
 							

                                ### nr available
                                textbox = 
                                {
                                    text = "PRODUCTION_GETNUMAVAILABLEOPTIONSACCESSSELF"
                                    parentanchor = top|right
                                    position = { -5 0 }
                                    autoresize = yes
                                    align = right|nobaseline
                                    visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
                                    tooltip = "PRODUCTION_METHOD_OPTIONS"
                                    using = tooltip_above
                                    using = fontsize_small

                                    background = 
                                    {
                                        using = default_background
                                        margin = { 8 4 }
                                    }
                                }	
                            }
						}
					}
					

                    fixedgridbox = 
                    {
                            datacontext = "[Building]"
							visible = "[And(Not(Building.IsMilitaryBuilding),Not(EqualTo_string(Building.GetBuildingType.GetKey,'building_construction_sector')))]"
                            position = { 320 0 }  #130 -5 
                            parentanchor = left|vcenter
                            datamodel = "[Building.AccessProductionMethodGroups]"
                            flipdirection = yes
                            addcolumn = 30  #52
                            addrow = 30  #50

                        item = 
                        {
                            widget = 
                            {
                                size = { 28 28 }  #50 50 
                                datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
                                datacontext = "[ProductionMethod]"
                                datacontext = "[Building]"
                                datacontext = "[ProductionMethodGroup]"
                                using = tooltip_above
                                tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"
                                
                                button = {
									visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
									using = expand_button_bg_no_fade
									size = { 100% 100% }
									onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
								}

								icon = {
									size = { 28 28 }
									parentanchor = center
									texture = "[ProductionMethod.GetTexture]"
								}
								
								### new pm
								has_new_pm_icon = {
									position = { -2 2 }
									parentanchor = bottom|left
									blockoverride "visible" {
										visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
									}
								}								

								### nr available
								textbox = {
									text = "PRODUCTION_GETNUMAVAILABLEOPTIONSACCESSSELF"
									parentanchor = top|right
									position = { -5 0 }
									autoresize = yes
									align = right|nobaseline
									visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
									tooltip = "PRODUCTION_METHOD_OPTIONS"
									using = tooltip_above
									using = fontsize_small

									background = {
										using = default_background
										margin = { 8 4 }
									}
								}
                            }
						}
					}
                    ### ACTION BUTTONS
                    flowcontainer = 
                    {
                        parentanchor = right|vcenter
                        position = { 22 0 }  #-5 -15 
                        spacing = 0
						visible = "[And(Not(Building.IsMilitaryBuilding),Not(BuildingType.IssDevelopment))]"                    
                        ### subsidize
                        widget = 
                        {
                            size = { 260 35 }
                        
                            #Infrastructure
							

							icon = {
									texture = "gfx/interface/icons/ai_strategy_icons/unused/infrastructure_expansion.dds"
									size = { 20 20 }
									tooltip = "STATE_INFRASTRUCTURE"
								parentanchor = right|vcenter
								position = { -258 0 }
								}
							textbox = {	
								align = right|nobaseline
								autoresize = yes
								minimumsize = { 35 -1 }
								maximumsize = { 35 -1 }			
								text = "[Building.GetState.GetInfrastructureBalance|*0G]"
								visible = "[GreaterThan_CFixedPoint(Building.GetState.GetInfrastructureBalance, '(CFixedPoint)0')]"
								tooltip = "STATE_INFRASTRUCTURE_DESC"
								parentanchor = right|vcenter
								position = { -232 0 }
									fontsize = 14
							}
							textbox = {
								align = right|nobaseline
								autoresize = yes
								minimumsize = { 35 -1 }
								maximumsize = { 35 -1 }			
								text = "[Building.GetState.GetInfrastructureBalance|*0R]"
								visible = "[Not(GreaterThan_CFixedPoint(Building.GetState.GetInfrastructureBalance, '(CFixedPoint)0'))]"
								tooltip = "STATE_INFRASTRUCTURE_DESC"				
								parentanchor = right|vcenter
								position = { -232 0 }
									fontsize = 14
								}


							button_icon_square = {
								position = { -208 0 }
								size = { 25 25 }
								#tooltip = "[State.GetBuilding('building_railway').GetQueueConstructionTooltip]"
								enabled = "[IsValid( Building.GetState.GetBuilding('building_railway').QueueConstruction )]"
								onclick = "[Execute( Building.GetState.GetBuilding('building_railway').QueueConstruction )]"
								onrightclick = "[Execute( Building.GetState.GetBuilding('building_railway').CancelConstruction )]"
								parentanchor = right|vcenter
								textbox = {
									align = right|nobaseline
									autoresize = yes	
									raw_text = " "
									visible = "[Not(GreaterThan_int32(Building.GetState.GetBuilding('building_railway').GetExpansionLevelsInQueue, '(int32)0'))]"				
									parentanchor = vcenter
									fontsize = 14
								}	
								textbox = {
									align = right|nobaseline
									autoresize = yes
									text = YELLOW_BUILDING_GET_STATE_GETBUILD_RAIL
									visible = "[GreaterThan_int32(Building.GetState.GetBuilding('building_railway').GetExpansionLevelsInQueue, '(int32)0')]"			
									parentanchor = vcenter
									fontsize = 14
								}				
							}
							#Unemployeed
							icon = {
								position = { -184 0 }
								parentanchor = right|vcenter
								size = { 20 20 }
								tooltip = "[concept_unemployed]"
								texture = "gfx/interface/icons/pops_icons/unemployed.dds"
							}

							textbox = {
								position = { -149 0 }
								tooltip = "[concept_unemployed]"
								text = "BUILDING_GET_STATE.GETNUMUNEMPLOYED"
								size = { 25 25 }
								align = right|nobaseline
								parentanchor = right|vcenter
									fontsize = 14
									}							
							#Peasants
							icon = {
								position = { -125 0 }
								parentanchor = right|vcenter
								size = { 22 22 }
								tooltip = "[GetPopType('peasants').GetName]"
								texture = "gfx/interface/icons/pops_icons/peasants.dds"
							}

							textbox = {
								position = { -90 0 }
								tooltip = "[GetPopType('peasants').GetName]"
								text = "BUILDING_GET_STATE.GETNUMWORKINGADULTS"
								size = { 25 25 }
								align = right|nobaseline
								parentanchor = right|vcenter
									fontsize = 14
									}


								
							### PROFITABLE
                            textbox = 
                            {
                                widgetid = "[Concatenate('productivity_value', Building.GetIDString)]"
                                visible = "[Not(Building.IsGovernmentFunded)]"
                                position = { -28 0 }
                                text = "TOOLTIP_BUILDING_GET_TOOLTIPTAGATTED"
                                autoresize = yes
                                align = nobaseline
                                parentanchor = right|vcenter
                            }                           
                        }
                    }
                    flowcontainer = 
                    {
                        parentanchor = right|vcenter
                        position = { -35 0 }  #-5 -15 
                        spacing = 0
						visible = "[Building.IsMilitaryBuilding]"                    
                        ### subsidize
                        widget = 
                        {
                            size = { 280 35 }
                        
                            #Infrastructure
							

							icon = {
									texture = "gfx/interface/icons/ai_strategy_icons/unused/infrastructure_expansion.dds"
									size = { 20 20 }
									tooltip = "STATE_INFRASTRUCTURE"
								parentanchor = right|vcenter
								position = { -258 0 }
								}
							textbox = {	
								align = right|nobaseline
								autoresize = yes
								minimumsize = { 35 -1 }
								maximumsize = { 35 -1 }			
								text = "[Building.GetState.GetInfrastructureBalance|*0G]"
								visible = "[GreaterThan_CFixedPoint(Building.GetState.GetInfrastructureBalance, '(CFixedPoint)0')]"
								tooltip = "STATE_INFRASTRUCTURE_DESC"
								parentanchor = right|vcenter
								position = { -232 0 }
									fontsize = 14
							}
							textbox = {
								align = right|nobaseline
								autoresize = yes
								minimumsize = { 35 -1 }
								maximumsize = { 35 -1 }			
								text = "[Building.GetState.GetInfrastructureBalance|*0R]"
								visible = "[Not(GreaterThan_CFixedPoint(Building.GetState.GetInfrastructureBalance, '(CFixedPoint)0'))]"
								tooltip = "STATE_INFRASTRUCTURE_DESC"				
								parentanchor = right|vcenter
								position = { -232 0 }
									fontsize = 14
								}


							button_icon_square = {
								position = { -208 0 }
								size = { 25 25 }
								#tooltip = "[State.GetBuilding('building_railway').GetQueueConstructionTooltip]"
								enabled = "[IsValid( Building.GetState.GetBuilding('building_railway').QueueConstruction )]"
								onclick = "[Execute( Building.GetState.GetBuilding('building_railway').QueueConstruction )]"
								onrightclick = "[Execute( Building.GetState.GetBuilding('building_railway').CancelConstruction )]"
								parentanchor = right|vcenter
								textbox = {
									align = right|nobaseline
									autoresize = yes	
									raw_text = " "
									visible = "[Not(GreaterThan_int32(Building.GetState.GetBuilding('building_railway').GetExpansionLevelsInQueue, '(int32)0'))]"				
									parentanchor = vcenter
									fontsize = 14
								}	
								textbox = {
									align = right|nobaseline
									autoresize = yes
									text = "YELLOW_BUILDING_GET_STATE_GETBUILD_RAIL"
									visible = "[GreaterThan_int32(Building.GetState.GetBuilding('building_railway').GetExpansionLevelsInQueue, '(int32)0')]"			
									parentanchor = vcenter
									fontsize = 14
								}				
							}
							#Unemployeed
							icon = {
								position = { -184 0 }
								parentanchor = right|vcenter
								size = { 20 20 }
								tooltip = "[concept_unemployed]"
								texture = "gfx/interface/icons/pops_icons/unemployed.dds"
							}

							textbox = {
								position = { -149 0 }
								tooltip = "[concept_unemployed]"
								text = "BUILDING_GET_STATE.GETNUMUNEMPLOYED"
								size = { 25 25 }
								align = right|nobaseline
								parentanchor = right|vcenter
									fontsize = 14
									}							
							#Peasants
							icon = {
								position = { -125 0 }
								parentanchor = right|vcenter
								size = { 22 22 }
								tooltip = "[GetPopType('peasants').GetName]"
								texture = "gfx/interface/icons/pops_icons/peasants.dds"
							}

							textbox = {
								position = { -90 0 }
								tooltip = "[GetPopType('peasants').GetName]"
								text = "BUILDING_GET_STATE.GETNUMWORKINGADULTS"
								size = { 25 25 }
								align = right|nobaseline
								parentanchor = right|vcenter
									fontsize = 14
									}

							

							textbox = {
								position = { 28 0 }
								text = "BUILDING_GET_STATEREGION_GETSTRATEGICREGION_GETNAMEGOLD"
								size = { 105 25 }
								align = right|nobaseline
								parentanchor = right|vcenter
								elide = left
									fontsize_min = 10
									}								
							### PROFITABLE
                            textbox = 
                            {
                                widgetid = "[Concatenate('productivity_value', Building.GetIDString)]"
                                visible = "[Not(Building.IsGovernmentFunded)]"
                                position = { -28 0 }
                                text = "TOOLTIP_BUILDING_GET_TOOLTIPTAGATTED"
                                autoresize = yes
                                align = nobaseline
                                parentanchor = right|vcenter
                            }
                        }
					}
					#IsDevelopment,add %
                    flowcontainer = 
                    {
                        parentanchor = right|vcenter
                        position = { 22 0 }  #-5 -15 
                        spacing = 0
						visible = "[And(Not(Building.IsMilitaryBuilding),BuildingType.IssDevelopment)]"                    
                        ### subsidize
                        widget = 
                        {
                            size = { 260 35 }
							icon = {
								position = { -315 0 }
								texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
								size = { 20 20 }
								tooltip = "BUILDING_MAP_LIST_PANEL_STAFFED_HEADER_TOOLTIP_EBML_MOD"
								parentanchor = right|vcenter
							}
							#Fully hired
							textbox = {
								position = { -55 0 }  #-5 -15 
								margin = { 2 0 }
								size = { 35 25 }
								align = right|nobaseline
								text = "[Building.GetEmploymentPercentage|%0]"
								parentanchor = vcenter
								elide = right
								visible = "[GreaterThanOrEqualTo_int32(Building.GetNoOfEmployed, Building.GetEmployeeCap)]"
								fontsize_min = 10
							}
							#Has no failed hires
							textbox = {
								position = { -55 0 }  #-5 -15 
								margin = { 2 0 }
								size = { 35 25 }
								align = right|nobaseline
								text = "[Building.GetEmploymentPercentage|%0o]"
								parentanchor = vcenter
								elide = right
								visible = "[And(And(GreaterThan_int32(Building.GetExpansionLevel, '(int32)0'), LessThan_int32(Building.GetNoOfEmployed, Building.GetEmployeeCap) ), Not(Building.HasFailedHires))]"
								fontsize_min = 10
							}
							#Has failed hires
							textbox = {
								position = { -55 0 }  #-5 -15 
								margin = { 2 0 }
								size = { 35 25 }
								align = right|nobaseline
								text = "[Building.GetEmploymentPercentage|%0r]"
								parentanchor = vcenter
								elide = right
								visible = "[And(And(GreaterThan_int32(Building.GetExpansionLevel, '(int32)0'), LessThan_int32(Building.GetNoOfEmployed, Building.GetEmployeeCap) ), Building.HasFailedHires)]"
								fontsize_min = 10
							}                        
                            #Infrastructure
							

							icon = {
									texture = "gfx/interface/icons/ai_strategy_icons/unused/infrastructure_expansion.dds"
									size = { 20 20 }
									tooltip = "STATE_INFRASTRUCTURE"
								parentanchor = right|vcenter
								position = { -258 0 }
								}
							textbox = {	
								align = right|nobaseline
								autoresize = yes
								minimumsize = { 35 -1 }
								maximumsize = { 35 -1 }			
								text = "[Building.GetState.GetInfrastructureBalance|*0G]"
								visible = "[GreaterThan_CFixedPoint(Building.GetState.GetInfrastructureBalance, '(CFixedPoint)0')]"
								tooltip = "STATE_INFRASTRUCTURE_DESC"
								parentanchor = right|vcenter
								position = { -232 0 }
									fontsize = 14
							}
							textbox = {
								align = right|nobaseline
								autoresize = yes
								minimumsize = { 35 -1 }
								maximumsize = { 35 -1 }			
								text = "[Building.GetState.GetInfrastructureBalance|*0R]"
								visible = "[Not(GreaterThan_CFixedPoint(Building.GetState.GetInfrastructureBalance, '(CFixedPoint)0'))]"
								tooltip = "STATE_INFRASTRUCTURE_DESC"				
								parentanchor = right|vcenter
								position = { -232 0 }
									fontsize = 14
								}


							button_icon_square = {
								position = { -208 0 }
								size = { 25 25 }
								#tooltip = "[State.GetBuilding('building_railway').GetQueueConstructionTooltip]"
								enabled = "[IsValid( Building.GetState.GetBuilding('building_railway').QueueConstruction )]"
								onclick = "[Execute( Building.GetState.GetBuilding('building_railway').QueueConstruction )]"
								onrightclick = "[Execute( Building.GetState.GetBuilding('building_railway').CancelConstruction )]"
								parentanchor = right|vcenter
								textbox = {
									align = right|nobaseline
									autoresize = yes	
									raw_text = " "
									visible = "[Not(GreaterThan_int32(Building.GetState.GetBuilding('building_railway').GetExpansionLevelsInQueue, '(int32)0'))]"				
									parentanchor = vcenter
									fontsize = 14
								}	
								textbox = {
									align = right|nobaseline
									autoresize = yes
									text = "YELLOW_BUILDING_GET_STATE_GETBUILD_RAIL"
									visible = "[GreaterThan_int32(Building.GetState.GetBuilding('building_railway').GetExpansionLevelsInQueue, '(int32)0')]"			
									parentanchor = vcenter
									fontsize = 14
								}				
							}
							#Unemployeed
							icon = {
								position = { -184 0 }
								parentanchor = right|vcenter
								size = { 20 20 }
								tooltip = "[concept_unemployed]"
								texture = "gfx/interface/icons/pops_icons/unemployed.dds"
							}

							textbox = {
								position = { -149 0 }
								tooltip = "[concept_unemployed]"
								text = "BUILDING_GET_STATE.GETNUMUNEMPLOYED"
								size = { 25 25 }
								align = right|nobaseline
								parentanchor = right|vcenter
									fontsize = 14
									}							
							#Peasants
							icon = {
								position = { -125 0 }
								parentanchor = right|vcenter
								size = { 22 22 }
								tooltip = "[GetPopType('peasants').GetName]"
								texture = "gfx/interface/icons/pops_icons/peasants.dds"
							}

							textbox = {
								position = { -90 0 }
								tooltip = "[GetPopType('peasants').GetName]"
								text = "BUILDING_GET_STATE.GETNUMWORKINGADULTS"
								size = { 25 25 }
								align = right|nobaseline
								parentanchor = right|vcenter
									fontsize = 14
									}


								
							### PROFITABLE
                            textbox = 
                            {
                                widgetid = "[Concatenate('productivity_value', Building.GetIDString)]"
                                visible = "[Not(Building.IsGovernmentFunded)]"
                                position = { -28 0 }
                                text = "TOOLTIP_BUILDING_GET_TOOLTIPTAGATTED"
                                autoresize = yes
                                align = nobaseline
                                parentanchor = right|vcenter
                            }                           						
                        }
                    }
                        
                        ### AUTOEXPAND
                        #building_auto_expand = { }
                    

                    flowcontainer = 
                    {
                        position = { 162 0 }  #5 21 
                        direction = vertical
                        spacing = 0
                        parentanchor = vcenter

                        ### DOWNSIZE / EXPAND
                        container = 
                        {
                            minimumsize = { 110 35 }

                            ### DOWNSIZE

                            button_icon_minus = 
                            {
                                size = { 25 25 }  #35 35 
                                parentanchor = vcenter
                                tooltip = "[Building.GetDownsizeTooltip]"
                                onclick = "[Execute( Building.Downsize )]"
                                enabled = "[IsValid( Building.Downsize )]"
                                using = tooltip_below
                            }

                            ### CANCEL CONSTRUCTION
                            button_icon_minus = 
                            {
                                size = { 25 25 }  #35 35 
                                parentanchor = vcenter
                                tooltip = "[Building.GetCancelConstructionTooltip]"
                                visible = "[IsValid( Building.CancelConstruction )]"
                                onclick = "[Execute( Building.CancelConstruction )]"
                                using = tooltip_below
                            }

                            ### LEVEL
                            container =
                            {
                                parentanchor = vcenter
                                position = { 25 0 }  #35 0 
                                background = {
                                    using = entry_bg
                                    margin = { 0 -2 }
                            }

                                textbox = 
                                {
                                    text = "[Building.GetExpansionLevelDesc]"
                                    align = hcenter|nobaseline
                                    size = { 50 35 }
                                    elide = right
                                    fontsize_min = 8
                                }
                            }

                            ### EXPAND
                            button_icon_plus = 
                            {
                                widgetid = "[Concatenate('building_expand', Building.GetIDString)]"
                                position = { 75 0 }  #75 0 
                                size = { 25 25 }  #35 35 
                                parentanchor = vcenter
                                tooltip = "[Building.GetQueueConstructionTooltip]"
                                onclick = "[Execute( Building.QueueConstruction )]"
                                enabled = "[IsValid( Building.QueueConstruction )]"
                                visible = "[And(Building.GetOwner.IsLocalPlayer, Building.IsExpandable)]"
                            }

                            ### AUTOEXPAND
                            building_auto_expand = 
                            {
                                position = { 100 0 }
                                size = { 25 25 }
                                parentanchor = vcenter
                            }
							#Subsidized
                            widget = 
                            {
                                position = { 125 0 }
                                size = { 25 25 }  #35 35 
                                parentanchor = left|vcenter
                                
                                icon = 
                                {
                                    using = rotate_glow_blue
                                    size = { 130% 130% }
                                    visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
                                    alwaystransparent = yes
                                    parentanchor = center
                                    using = default_fade_in_out
                                }
                                button_icon_round_action = 
                                {
                                    size = { 100% 100% }
                                    visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
                                    enabled = "[IsValid( Building.ToggleSubsidies )]"
                                    onclick = "[Execute( Building.ToggleSubsidies )]" 
                                    tooltip = SUBSIDIZED_YES
                                    
                                    blockoverride "icon" 
                                    {
                                        texture = "gfx/interface/production_methods/subsidized.dds"
                                    }
                                    blockoverride "icon_size" 
                                    {
                                        size = { 80% 80% }
                                    }
                                }
                                
                                button_icon_round_action = 
                                {
                                    size = { 100% 100% }							
                                    visible = "[And(Building.GetBuildingType.CanBeSubsidized,Not(Building.IsSubsidized))]"
                                    enabled = "[IsValid( Building.ToggleSubsidies )]"
                                    onclick = "[Execute( Building.ToggleSubsidies )]" 
                                    tooltip = SUBSIDIZED_NO
                                    using = confirm_button_sound
                                    
                                    blockoverride "icon" 
                                    {
                                        texture = "gfx/interface/production_methods/subsidized_not.dds"
                                    }
                                    blockoverride "icon_size" 
                                    {
                                        size = { 80% 80% }
                                    }
                                }
                            }
                        }

						### BUILD PROGRESS
                        default_progressbar_horizontal = 
                        {
                            visible = "[Building.HasConstructionQueued]"
                            tooltip = "BUILDING_PROGRESS_TOOLTIP"
                            size = { 100 5 }
                            using = default_list_position

                            blockoverride "values" 
                            {
                                value = "[Building.GetConstructionProgressPercentage]"
                                min = 0
                                max = 1
                            }
                        }
                    }
                }
            }
		}
	}
}
